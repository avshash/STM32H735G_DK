#include "Common.h"
#include "UsbDevicesManager.h"

#include "UsbPort.h"
#include "UsbDeviceSingle.h"
#include "TextSingleLine.h"
#include <cstring>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDevicesManager
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UsbDevicesManager::UsbDevicesManager () :
  m_enumerator ()
{
  memset (m_devices, 0, sizeof (m_devices));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDevicesManager
// @method:   portConnected
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDevicesManager::portConnected (UsbPort * connected_port)
{
  m_enumerator.portConnected (connected_port);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDevicesManager
// @method:   tick
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDevicesManager::tick ()
{
  m_enumerator.tick ();

  for (int index = 0; index < 8; index++)
  {
    if (m_devices[index] != NULL)
    {
      m_devices[index]->tick ();
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDevicesManager
// @method:   getFreeAddress
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t
UsbDevicesManager::getFreeAddress () const
{
  return 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDevicesManager
// @method:   registerDevice
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDevicesManager::registerDevice (UsbDeviceSingle & new_device)
{
  int index;

  for (index = 0; index < 8; index++)
  {
    if (m_devices[index] == NULL)
    {
      m_devices[index] = &new_device;
      break;
    }
  }

  ASSERT_TEMP (index < 8);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDevicesManager
// @method:   getDeviceHandler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UsbDeviceSingle *
UsbDevicesManager::getDeviceHandler (const UsbDeviceConfiguration & configuration)
{
  for (int index = 0; index < 8; index++)
  {
    UsbDeviceSingle * usb_device = m_devices[index];
    if (usb_device != NULL)
    {
      if (usb_device->testConfiguration (configuration))
      {
        return usb_device;
      }
    }
  }

  return NULL;
}

