#include "Common.h"
#include "UsbDeviceSingle.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingle
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UsbDeviceSingle::UsbDeviceSingle  () :
  m_device_state (USB_DEVICE_SINGLE_CLOSED)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingle
// @method:   getDeviceState
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TypeUsbDeviceSingleState
UsbDeviceSingle::getDeviceState () const
{
  return m_device_state;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingle
// @method:   setDeviceState
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDeviceSingle::setDeviceState (TypeUsbDeviceSingleState new_state)
{
  ASSERT_TEST (m_device_state != new_state);

  m_device_state = new_state;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingle
// @method:   tick
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDeviceSingle::tick ()
{
  switch (m_device_state)
  {
    case USB_DEVICE_SINGLE_ACTIVE:
      deviceTick ();
      break;

    case USB_DEVICE_SINGLE_ERROR:
      closeDevice ();
      setDeviceState (USB_DEVICE_SINGLE_CLOSED);
      break;

    case USB_DEVICE_SINGLE_CLOSED:
    case USB_DEVICE_SINGLE_CONFIGURING:
      break;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingle
// @method:   configurationError
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDeviceSingle::configurationError ()
{
  ASSERT_TEST (m_device_state != USB_DEVICE_SINGLE_ACTIVE);

  if (m_device_state == USB_DEVICE_SINGLE_CONFIGURING)
  {
    setDeviceState (USB_DEVICE_SINGLE_ERROR);
  }
}

