#include "Common.h"
#include "UsbDeviceSingleHidMouse.h"

#include "ModuleManagerLcd.h"
#include "TextSingleLine.h"
#include <cstring>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UsbDeviceSingleHidMouse::UsbDeviceSingleHidMouse  () :
  UsbDeviceSingleHid ()
{
  memset (&m_state, 0 , sizeof (m_state));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   getDeviceClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TypeUsbDeviceClass
UsbDeviceSingleHidMouse::getDeviceClass () const
{
  return USB_DEVICE_CLASS_HID_MOUSE;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   getBootReportSize
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t
UsbDeviceSingleHidMouse::getBootReportSize () const
{
  return 3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   registerReport
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbDeviceSingleHidMouse::registerReport (const uint8_t * report)
{
  if (report == NULL)
  {
    m_state.m_mouse_is_active = 0;
    return;
  }

  ModuleManagerLcd & lcd_manager = ModuleManager::getLcd ();
  uint16_t x_max = 16 * lcd_manager.getParamValue (LCD_PARAM_WIDTH);
  uint16_t y_max = 16 * lcd_manager.getParamValue (LCD_PARAM_HEIGHT);

  // Left button factor is 16. Right button factor is 1. No button pressed is factor 4.
  int factor = ((m_state.m_mouse_buttons & 0x02) != 0) ? 1 : (((m_state.m_mouse_buttons & 0x01) != 0) ? 16 : 4);

  int32_t x = ((int32_t) m_state.m_x) + (factor * (int8_t) report[1]);
  x = MAX (0, x);
  m_state.m_x = MIN (x, x_max);

  int32_t y = ((int32_t) m_state.m_y) + (factor * (int8_t) report[2]);
  y = MAX (0, y);
  m_state.m_y = MIN (y, y_max);

  if ((report[1] != 0) || (report[2] != 0) || (m_state.m_mouse_buttons != report[0]))
  {
    TextSingleLine mouse_report;
    mouse_report << "Mouse state is (0x" << TEXT_STYLE_HEX2 << report[0]
                 << TEXT_STYLE_HEX4 << ", 0x" << m_state.m_x << ", 0x" << m_state.m_y << ").";
  }

  m_state.m_mouse_buttons = report[0];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   getIdlePeriod
// @return:   '0' means that mouse remains indefinitely idle.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t
UsbDeviceSingleHidMouse::getIdlePeriod () const
{
  return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   getXLocation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t
UsbDeviceSingleHidMouse::getXLocation () const
{
  return (m_state.m_x / 16);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   getYLocation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t
UsbDeviceSingleHidMouse::getYLocation () const
{
  return (m_state.m_y / 16);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   testRightButton
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool
UsbDeviceSingleHidMouse::testRightButton () const
{
  return ((m_state.m_mouse_buttons & 0x02) != 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbDeviceSingleHidMouse
// @method:   testLeftButton
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool
UsbDeviceSingleHidMouse::testLeftButton () const
{
  return ((m_state.m_mouse_buttons & 0x01) != 0);
}

