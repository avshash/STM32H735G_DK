#include "Common.h"
#include "UsbEndpointParams.h"

#include "TextSingleLine.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbEndpointParams
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UsbEndpointParams::UsbEndpointParams  () :
  m_ep_number (0),
  m_maximum_packet_size (0),
  m_interval (0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbEndpointParams
// @method:   parseDescriptor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
UsbEndpointParams::parseDescriptor (const uint8_t * descriptor_base)
{
  ASSERT_TEST (m_ep_number == 0);

  if (descriptor_base[0] != 7)
  {
    TextSingleLine ().print ("Endpoint packet data length mismatch.");
    return;
  }

  uint16_t maximum_packet_size = U8LE2U16 ((descriptor_base + 4));
  if ((maximum_packet_size < 1) || (64 < maximum_packet_size))
  {
    TextSingleLine ().print ("Unsupported maximum packet size.");
    return;
  }

  m_maximum_packet_size = maximum_packet_size;
  m_interval = descriptor_base[6];
  m_ep_number = descriptor_base[2] & 0x0F;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbEndpointParams
// @method:   getEpNumber
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t
UsbEndpointParams::getEpNumber () const
{
  return m_ep_number;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbEndpointParams
// @method:   getMaximumPacketSize
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t
UsbEndpointParams::getMaximumPacketSize () const
{
  return m_maximum_packet_size;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    UsbEndpointParams
// @method:   getInterval
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t
UsbEndpointParams::getInterval () const
{
  return m_interval;
}

