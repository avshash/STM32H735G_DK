#include "Common.h"
#include "MacronixInterface.h"

#include "MacronixParams.h"
#include <cstring>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    MacronixInterface
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MacronixInterface::MacronixInterface (OctoSpi & ospi_interface, const MacronixParams & macronix_params) :
  m_ospi_interface (ospi_interface),
  m_dummy_cycles (20)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    MacronixInterface
// @method:   activateGpio
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
MacronixInterface::activateGpio ()
{
  m_ospi_interface.activateGpio ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    MacronixInterface
// @method:   enableOspi
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
MacronixInterface::enableOspi (const MacronixParams & macronix_params)
{
  uint32_t device_size = macronix_params.getFlashParam (FLASH_PARAM_MEMORY_SIZE);
  uint32_t max_clock_frequency = macronix_params.getMacronixParam (MACRONIX_PARAM_CLOCK_MAX_FREQUENCY);

  OspiConfigurationParams params (OSPI_MEMORY_MACRONIX);
  params.setParam (OSPI_CONFIGURATION_PARAM_DEVICE_LOG_SIZE, Common::log2int (device_size));
  params.setParam (OSPI_CONFIGURATION_PARAM_CLOCK_MAX_FREQUENCY, max_clock_frequency);
  params.setParam (OSPI_CONFIGURATION_PARAM_CHIP_SELECT_HIGH_TIME, 2);

  m_ospi_interface.configure (params);
  m_dummy_cycles = macronix_params.getMacronixParam (MACRONIX_PARAM_DUMMY_CYCLES) & 0x00FFU;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    MacronixInterface
// @method:   writeData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int
MacronixInterface::writeData (const OspiCommandParams & command_params)
{
  return m_ospi_interface.commitWriteCommand (command_params);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    MacronixInterface
// @method:   readData
// @dscr:     Tries reading data from flash memory. Allows for two read failures.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int
MacronixInterface::readData (OspiCommandParams & command_params)
{
  return m_ospi_interface.commitReadCommand (command_params);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    MacronixInterface
// @method:   getDummyCycles
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t
MacronixInterface::getDummyCycles () const
{
  return m_dummy_cycles;
}


