#include "Common.h"
#include "TextSingleLine.h"

#include "SystemTime.h"
#include "ModuleManagerLcd.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine::TextSingleLine (TypeTextColor color, TypeTextStyle style) :
 m_color (color),
 m_style (style),
 m_cur_offset (0)
{
  uint32_t tick = SystemTime::getSystemMilliTime ();
  uint32_t seconds = tick / 1000;
  uint32_t milli = tick % 1000;

  printUBase (seconds, 5, 10);
  print (".");
  printUBase (milli, 3, 10);
  print (": ");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine::~TextSingleLine ()
{
  flushLine ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   flushLine
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
TextSingleLine::flushLine ()
{
  if (ModuleManager::testModuleActive (MODULE_MANAGER_LCD))
  {
    ModuleManagerLcd & lcd_manager = ModuleManager::getLcd ();
    lcd_manager.registerData (m_buffer, m_cur_offset);
  }

  m_cur_offset = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   print
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
TextSingleLine::print (const char * data)
{
  const uint32_t buffer_limit = sizeof (m_buffer) / sizeof (uint16_t);
  char const * next_char = data;

  while ((*next_char != 0) && (m_cur_offset < buffer_limit))
  {
    uint16_t cur_char_value = (MAX (*next_char, 32)) - 32;

    m_buffer[m_cur_offset] = m_color | cur_char_value;

    next_char++;
    m_cur_offset++;
  }

  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   printUBase
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
TextSingleLine::printUBase (uint32_t number, uint8_t digits, uint8_t base)
{
  char buffer[11];

  if (digits == 0)
  {
    uint32_t temp = number;
    do
    {
      digits++;
      temp = temp / base;
    } while (0 < temp);
  }

  buffer[digits] = 0;

  while (0 < digits)
  {
    const uint8_t hex_font_table[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    uint8_t next_char = hex_font_table[(number % base)];
    number = number / base;

    digits--;
    buffer[digits] = next_char;
  }

  print (buffer);

  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   print
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
TextSingleLine::print (uint32_t number)
{
  if (m_style < TEXT_STYLE_DEC)
    // Internal error.
    return *this;

  if (m_style == TEXT_STYLE_DEC)
    return printUBase (number, 0, 10);

  if (m_style <= TEXT_STYLE_DEC10)
    return printUBase (number, m_style - TEXT_STYLE_DEC, 10);

  if (m_style == TEXT_STYLE_HEX)
    return printUBase (number, 0, 16);

  if (m_style <= TEXT_STYLE_HEX8)
    return printUBase (number, m_style - TEXT_STYLE_HEX, 16);

  ASSERT_TEST (false);
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   setNumStyle
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
TextSingleLine::setNumStyle (TypeTextStyle style)
{
  m_style = style;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   setColor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
TextSingleLine::setColor (TypeTextColor color)
{
  ASSERT_TEST ((color & 0xFF00UL) == color);
  m_color = color;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   operator<<
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
operator<< (TextSingleLine & obj, const char * data)
{
  return obj.print (data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   operator<<
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
operator<< (TextSingleLine & obj, uint32_t data)
{
  return obj.print (data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   operator<<
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
operator<< (TextSingleLine & obj, TypeTextStyle style)
{
  return obj.setNumStyle (style);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    TextSingleLine
// @method:   operator<<
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TextSingleLine &
operator<< (TextSingleLine & obj, TypeTextColor color)
{
  return obj.setColor (color);
}

