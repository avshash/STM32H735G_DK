#include "Common.h"
#include "H735ModuleManagerInterrupts.h"

#include "PhysicalSystemControlRegisters.h"
#include "ModuleManagerClockControl.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735ModuleManagerInterrupts
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
H735ModuleManagerInterrupts::H735ModuleManagerInterrupts ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735ModuleManagerInterrupts
// @method:   activateInterrupt
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
H735ModuleManagerInterrupts::activateInterrupt (TypeInterruptFamily, TypeInterruptAction)
{
  ASSERT_CRITICAL (false);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735ModuleManagerInterrupts
// @method:   doAction
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
H735ModuleManagerInterrupts::doAction (TypeModuleAction action)
{
  switch (action)
  {
    case MODULE_ACTION_TICK:
      break;

    case MODULE_ACTION_OPEN:
      open ();
      break;

    default:
      break;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735ModuleManagerInterrupts
// @method:   open
// @dscr:     4 bits for group priority (pre-emption), and 4 for subpriority (pending queue priority).
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
H735ModuleManagerInterrupts::open ()
{
  // Set interrupt priority grouping field to 3.
  SYSTEM_CONTROL_REGISTERS.AIRCR = 0x05FA0300UL;

  // Set systick reload value to 1 millisecond, based on clock source 64 Mhz.
  SYSTEM_CONTROL_REGISTERS.SYST_RVR = 0x0000FA00UL;
  SYSTEM_CONTROL_REGISTERS.SYST_CVR = 0x0000FA00UL;
  // Enable systick interrupt ('sysTickHandler').
  SYSTEM_CONTROL_REGISTERS.SHPR3 = (SYSTEM_CONTROL_REGISTERS.SHPR3 & 0x00FFFFFFUL) | 0xF0000000UL;
  SYSTEM_CONTROL_REGISTERS.SYST_CSR = 0x00000007UL;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735ModuleManagerInterrupts
// @method:   setPriority
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
H735ModuleManagerInterrupts::setPriority (int irq_number, uint32_t priority)
{
  ASSERT_CRITICAL (false);
}

