#include "Common.h"
#include "H735UsbInterruptHandler.h"

#include "UsbChannelsManager.h"
#include "ModuleManagerInterrupts.h"
#include "PhysicalOtgFsRegisters.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735UsbInterruptHandler
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
H735UsbInterruptHandler::H735UsbInterruptHandler (UsbChannelsManager & channels) :
  m_channels (channels)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735UsbInterruptHandler
// @method:   configure
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
H735UsbInterruptHandler::configure ()
{
  ModuleManagerInterrupts & interrupts_manager = ModuleManager::getInterrupts ();
  interrupts_manager.registerInterrupt (*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735UsbInterruptHandler
// @method:   getInterruptParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int
H735UsbInterruptHandler::getInterruptParam (TypeInterruptParam param)
{   
  switch (param)
  {
    case INTERRUPT_PARAM_IRQ_ENTRIES_COUNT:
      return 4;

    case INTERRUPT_PARAM_IRQ_PRIORITY:
      return 6;

    case INTERRUPT_PARAM_HANDLER_GROUP:
      return INTERRUPT_HANDLER_USB;
  }

  ASSERT_CRITICAL (false);
  return -1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735UsbInterruptHandler
// @method:   getIrqNumber
// @dscr:     Follows table 140, in RM0468.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int
H735UsbInterruptHandler::getIrqNumber (int irq_index)
{
  ASSERT_TEST ((0 <= irq_index) && (irq_index <= 4));

  return (74 + irq_index);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    H735UsbInterruptHandler
// @method:   handleInterrupt
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
H735UsbInterruptHandler::handleInterrupt (TypeInterruptAction action)
{
  ASSERT_TEST (action == INTERRUPT_ACTION_USB_GENERAL);

  uint32_t gintsts = OTG_FS_REGISTERS.GINTSTS;
  // Clear active interrupts.
  OTG_FS_REGISTERS.GINTSTS = gintsts;

  while ((OTG_FS_REGISTERS.GINTSTS & 0x00000010UL) != 0)
  {
    m_channels.handleRxPacket ();
  }
    
  if ((gintsts & 0x00000008UL) != 0)
  {
    m_channels.markSof ();
  }
}

