#include "common.h"
#include "FileParserModuleRead.h"

#include "Module.h"
#include "Library.h"
#include "String.h"
#include "SinglePathData.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserModuleRead
// @method:   constructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserModuleRead::FileParserModuleRead (Configuration & configuration,
                                            const Library & library, const String & path) :
  FileParserModule (configuration, path),
  m_library (library),
  m_module_name ()
{
  parseFile ();

  if (m_module_name == NULL)
  {
    m_module_name << m_library.getDefaultModuleName ();
  }

  appendSingle ();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserModuleRead
// @method:   destructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserModuleRead::~FileParserModuleRead ()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserModuleRead
// @method:   appendSingle
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserModuleRead::appendSingle ()
{
  Module & cur_module = getModule (m_module_name, true);

  cur_module.addSinglePathData (m_library, getPath ());
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserModuleRead
// @method:   registerModuleName
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserModuleRead::registerModuleName (const String & module_name)
{
  VERIFY_INPUT_VALID (m_module_name == NULL, "Multiple module name defined.");
  m_module_name << module_name;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserModuleRead
// @method:   registerModule
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserModuleRead::registerModule (const String & sub_module)
{
  String sub_module_path (getPath ());
  sub_module_path << sub_module << "/";

  FileParserModuleRead module_reader (getConfiguration (), m_library, sub_module_path);
}



