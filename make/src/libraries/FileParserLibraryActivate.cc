#include "common.h"
#include "FileParserLibraryActivate.h"

#include "Libraries.h"
#include "Library.h"
#include "Central.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibraryActivate
// @method:   constructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserLibraryActivate::FileParserLibraryActivate (Libraries & libraries, Library & library)
: FileParserLibrary (libraries, library)
{
  if (!library.isActive ())
  {
    library.activate ();
    parseFile ();
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibraryActivate
// @method:   destructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserLibraryActivate::~FileParserLibraryActivate ()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibraryActivate
// @method:   registerModulePath
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibraryActivate::registerModulePath (const String & module_path)
{
  Libraries & libraries = getLibraries ();
  Library & library = getLibrary ();
  libraries.registerModule (library, module_path);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibraryActivate
// @method:   registerActiveLibrary
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibraryActivate::registerActiveLibrary (const String & library_name)
{
  Libraries & libraries = getLibraries ();
  libraries.activateLibrary (library_name);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibraryActivate
// @method:   registerGlobalParam
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibraryActivate::registerGlobalParam (const String & param_name, const String & param_value)
{
  Library & library = getLibrary ();
  library.addGlobalParam (param_name, param_value);
}


