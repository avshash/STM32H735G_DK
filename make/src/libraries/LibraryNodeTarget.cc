#include "common.h"
#include "LibraryNodeTarget.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    LibraryNodeTarget
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LibraryNodeTarget::LibraryNodeTarget (Library & parent) :
  LibraryNode (parent, parent.getPath ()),
  m_target_module_name (),
  m_target_prefix ()
{
  activate ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    LibraryNodeTarget
// @method:   destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LibraryNodeTarget::~LibraryNodeTarget ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    LibraryNodeTarget
// @method:   setTargetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
LibraryNodeTarget::setTargetName (const String & target_name)
{
  INTERNAL_ASSERT (m_target_module_name == NULL);

  m_target_prefix << "objects/exe/" << target_name << "/";
  m_target_module_name << "__" << target_name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    LibraryNodeTarget
// @method:   getDefaultModuleName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *
LibraryNodeTarget::getDefaultModuleName () const
{
  return m_target_module_name.cStr ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    LibraryNodeTarget
// @method:   getObjectTargetPrefix
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *
LibraryNodeTarget::getObjectTargetPrefix () const
{
  return m_target_prefix.cStr ();
}

