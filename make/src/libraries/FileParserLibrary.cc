#include "common.h"
#include "FileParserLibrary.h"

#include "Library.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserLibrary::FileParserLibrary (Libraries & libraries, Library & library)
: FileParser ("library.params", library.getPath ()),
  m_libraries (libraries),
  m_library (library)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserLibrary::~FileParserLibrary ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerDirective
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerDirective (const String & directive)
{
  if (directive == "DIR_MODULE")
  {
    return registerModulePath ();
  }

  if (directive == "DIR_LIBRARY")
  {
    return registerLibrary ();
  }

  if (directive == "ACTIVE_LIBRARY")
  {
    return registerActiveLibrary ();
  }

  if (directive == "GLOBAL_PARAM")
  {
    return registerGlobalParam ();
  }

  if (directive == "LIBRARY_PARAM")
  {
    return registerLibraryParam ();
  }

  VERIFY_INPUT_VALID (false, "Unknown library directive.");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerModulePath
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerModulePath ()
{
  String module_path = readNextString (true);
  registerModulePath (module_path);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerLibrary
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerLibrary ()
{
  String library_name = readNextString (false);
  registerLibrary (library_name);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerActiveLibrary
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerActiveLibrary ()
{
  String active_library = readNextString (false);
  registerActiveLibrary (active_library);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerGlobalParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerGlobalParam ()
{
  String param_name = readNextString (false);
  String param_val = readNextString (true);
  registerGlobalParam (param_name, param_val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerLibraryParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerLibraryParam ()
{
  String param_name = readNextString (false);
  String param_val = readNextString (true);
  registerLibraryParam (param_name, param_val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerModulePath
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerModulePath (const String &)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerLibrary
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerLibrary (const String &)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerActiveLibrary
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerActiveLibrary (const String &)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerGlobalParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerGlobalParam (const String &, const String &)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   registerLibraryParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserLibrary::registerLibraryParam (const String &, const String &)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   getLibraries
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Libraries &
FileParserLibrary::getLibraries ()
{
  return m_libraries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserLibrary
// @method:   getLibrary
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Library &
FileParserLibrary::getLibrary ()
{
  return m_library;
}


