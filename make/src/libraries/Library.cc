#include "common.h"
#include "Library.h"

#include "FileParserLibrary.h"
#include "Libraries.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Library::Library (const String & path)
: m_library_path (path),
  m_params_list (),
  m_is_active (false)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Library::~Library ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   addLibraryParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
Library::addLibraryParam (const String & variable_name, const String & variable_value)
{
  VERIFY_INPUT_VALID (variable_name.cStr ()[0] != '_', "Variable name prefix '_' is a reserved word prefix.");

  m_params_list.enqueue (variable_name);
  m_params_list.enqueue (variable_value);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   appendSourceParams
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
Library::appendSourceParams (QueueString & variables_list) const
{
  appendNodeParams (variables_list);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   appendNodeParams
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
Library::appendNodeParams (QueueString & variables_list) const
{
  if (m_is_active)
  {
    variables_list.enqueue (m_params_list);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   addLibraryParams
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
Library::addLibraryParams (const QueueString & params_list)
{
  m_params_list.enqueue (params_list);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   addGlobalParam
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
Library::addGlobalParam (const String & variable_name, const String & variable_val)
{
  fprintf (stdout, "Add global variable ('%s', '%s').\n", variable_name.cStr (), variable_val.cStr ());
  addLibraryParam (variable_name, variable_val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   activate
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
Library::activate ()
{
  m_is_active = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   isActive
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool
Library::isActive () const
{
  return m_is_active;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   getPath
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const String &
Library::getPath () const
{
  return m_library_path;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   getDefaultModuleName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *
Library::getDefaultModuleName () const
{
  return "_MODULE_ROOT";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   getObjectTargetPrefix
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *
Library::getObjectTargetPrefix () const
{
  return "objects/";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    Library
// @method:   objectType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TypeObject
Library::objectType () const
{
  return OBJECT_LIBRARY;
}

