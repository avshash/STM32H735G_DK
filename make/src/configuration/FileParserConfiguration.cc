#include "common.h"
#include "FileParserConfiguration.h"

#include "String.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   constructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserConfiguration::FileParserConfiguration (Configuration & configuration, const String & file_name)
: FileParser (file_name),
  m_configuration (configuration)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   destructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserConfiguration::~FileParserConfiguration ()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   getConfiguration
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Configuration &
FileParserConfiguration::getConfiguration ()
{
  return m_configuration;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   registerDirective
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::registerDirective (const String & directive)
{
  if (directive == "FILE_INPUT")
  {
    return readFile ();
  }

  if (directive == "FILE_COMPILER")
  {
    return registerCompiler ();
  }

  if (directive == "FILE_TARGET")
  {
    return registerTarget ();
  }

  if (directive == "ACTIVE_LIBRARY")
  {
    return activateLibrary ();
  }

  VERIFY_INPUT_VALID (false, "Unknown configuration directive.");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   readFile
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::readFile ()
{
  String file_name = readNextString (true);
  String complete_name;
  complete_name << getPath () << file_name;

  readFile (complete_name);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   registerCompiler
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::registerCompiler ()
{
  String compiler_file = readNextString (true);
  String complete_name;
  complete_name << getPath () << compiler_file;

  registerCompiler (complete_name);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   registerTarget
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::registerTarget ()
{
  String target_file = readNextString (true);
  String complete_name;
  complete_name << getPath () << target_file;

  registerTarget (complete_name);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   activateLibrary
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::activateLibrary ()
{
  String library_name = readNextString (false);
  activateLibrary (library_name);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   readFile
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::readFile (const String &)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   registerCompiler
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::registerCompiler (const String &)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   registerTarget
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::registerTarget (const String &)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserConfiguration
// @method:   activateLibrary
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserConfiguration::activateLibrary (const String &)
{
}

