#include "common.h"
#include "FileParserCompiler.h"

#include "Compiler.h"
#include "Configuration.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   constructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserCompiler::FileParserCompiler (Configuration & configuration, const String & source_file)
: FileParser (source_file),
  m_configuration (configuration),
  m_compiler (new Compiler ()),
  m_compiler_name ()
{
  parseFile ();
  registerConfiguration ();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   destructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FileParserCompiler::~FileParserCompiler ()
{
  if (m_compiler != NULL)
  {
    delete m_compiler;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerConfiguration
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerConfiguration ()
{
  INTERNAL_ASSERT (m_compiler != NULL);
  VERIFY_INPUT_VALID (m_compiler_name != NULL, "Missing compiler name definition.");

  m_configuration.addObject (m_compiler_name, m_compiler);
  m_compiler = NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerDirective
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerDirective (const String & directive)
{
  if (directive == "COMPILER_NAME")
  {
    return registerName ();
  }

  if (directive == "VARIABLE_RULE")
  {
    return registerVariableRule ();
  }

  if (directive == "MODULE_PARAM")
  {
    return registerModuleParam ();
  }

  if (directive == "MAKE_RULE_CONST")
  {
    return registerMakeRuleConst ();
  }

  if (directive == "MAKE_RULE_PARAM")
  {
    return registerMakeRuleParam ();
  }

  VERIFY_INPUT_VALID (false, "Unknown compiler directive.");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerName
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerName ()
{
  VERIFY_INPUT_VALID (m_compiler_name == NULL, "Multiple compiler names defined.");
  String compiler_name = readNextString (false);

  m_compiler_name << compiler_name;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerVariableRule
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerVariableRule ()
{
  String variable_name = readNextString (false);
  String prefix_value = readNextString (true);
  String postfix_value = readNextString (true);

  m_compiler->addVariableRule (variable_name, prefix_value, postfix_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerModuleParam
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerModuleParam ()
{
  String param_name = readNextString (false);
  String variable_name = readNextString (false);

  m_compiler->addParamRule (param_name, variable_name);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerMakeRuleConst
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerMakeRuleConst ()
{
  String rule = readNextString (true);

  m_compiler->appendMakeRuleConst (rule);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    FileParserCompiler
// @method:   registerMakeRuleParam
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
FileParserCompiler::registerMakeRuleParam ()
{
  String prefix_value = readNextString (true);
  String param_name = readNextString (false);
  String postfix_value = readNextString (true);

  m_compiler->appendMakeRuleParam (prefix_value, param_name, postfix_value);
}

