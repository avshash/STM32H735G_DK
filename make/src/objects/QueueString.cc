#include "common.h"
#include "QueueString.h"

#include "String.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   constructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QueueString::QueueString ()
: m_strings_count (0),
  m_strings_size (2),
  m_strings ((String **) malloc (m_strings_size * sizeof (String *)))
{
  TEST_MALLOC_OUT_OF_MEMORY (m_strings);
  memset (m_strings, 0, m_strings_size * sizeof (String *));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   destructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QueueString::~QueueString ()
{
  if (m_strings != NULL)
  {
    for (uint32_t index = 0; index < m_strings_count; index++)
    {
      String * next_string = m_strings[index];
      if (next_string != NULL)
      {
        delete next_string;
      }
    }

    free (m_strings);
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   enqueue
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
QueueString::enqueue (const char * c_str)
{
  verifySpace (1);

  m_strings[m_strings_count] = new String (c_str);
  m_strings_count++;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   enqueue
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
QueueString::enqueue (const String & new_string)
{
  verifySpace (1);

  m_strings[m_strings_count] = new String (new_string);
  m_strings_count++;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   enqueue
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
QueueString::enqueue (const QueueString & new_list)
{
  uint32_t new_strings_count = new_list.m_strings_count;
  verifySpace (new_strings_count);

  for (uint32_t index = 0; index < new_strings_count; index++)
  {
    m_strings[m_strings_count] = new String (new_list.getMember (index));
    m_strings_count++;

  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   queueSize
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint32_t
QueueString::queueSize () const
{
  return m_strings_count;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   getMember
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const String &
QueueString::getMember (uint32_t index) const
{
  INTERNAL_ASSERT (index < m_strings_count);

  const String * member = m_strings[index];
  INTERNAL_ASSERT (member != NULL);

  return *member;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @class:    QueueString
// @method:   verifySpace
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
QueueString::verifySpace (uint32_t additional_strings_count)
{
  uint32_t next_strings_count = additional_strings_count + m_strings_count;
  if (next_strings_count <= m_strings_size)
  {
    return;
  }

  uint32_t next_strings_size = m_strings_size * 2;
  while (next_strings_size < next_strings_count)
  {
    next_strings_size = next_strings_size * 2;
  }

  String ** new_strings = ((String **) malloc (next_strings_size * sizeof (String *)));
  TEST_MALLOC_OUT_OF_MEMORY (new_strings);
  memset (new_strings, 0, next_strings_size * sizeof (String *));
  memcpy (new_strings, m_strings, m_strings_size * sizeof (String *));

  free (m_strings);
  m_strings = new_strings;
  m_strings_size = next_strings_size;
}


